package com.ahom.hrms.Helper;import com.ahom.hrms.entities.SalarySlip;import lombok.Data;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellStyle;import org.apache.poi.ss.usermodel.HorizontalAlignment;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.util.CellRangeAddress;import org.apache.poi.xssf.usermodel.XSSFFont;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.time.LocalDate;import java.util.Date;import java.util.List;@Datapublic class ExportDataCsv {    private XSSFWorkbook workbook;    private XSSFSheet sheet;    private List<SalarySlip>salarySlips;    public ExportDataCsv(List<SalarySlip> salarySlips) {        this.salarySlips = salarySlips;        workbook=new XSSFWorkbook();    }    private void createCell(Row row, int columnCount, Object value, CellStyle style){        sheet.autoSizeColumn(columnCount);        Cell cell = row.createCell(columnCount);        if (value instanceof Integer){            cell.setCellValue((Integer) value);        }else if (value instanceof Double){            cell.setCellValue((Double) value);        }else if (value instanceof Boolean){            cell.setCellValue((Boolean) value);        }else if (value instanceof Long){            cell.setCellValue((Long) value);        } else if (value instanceof Date) {            cell.setCellValue((Date) value);        } else if (value instanceof LocalDate) {            cell.setCellValue((LocalDate)value);        } else {            cell.setCellValue((String) value);        }        cell.setCellStyle(style);    }    private void createHeaderRow(){        sheet   = workbook.createSheet("Salary Information");        Row row = sheet.createRow(0);        CellStyle style = workbook.createCellStyle();        XSSFFont font = workbook.createFont();        font.setBold(true);        font.setFontHeight(20);        style.setFont(font);        style.setAlignment(HorizontalAlignment.CENTER);        createCell(row, 0, "Salary Information", style);        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 8));        font.setFontHeightInPoints((short) 10);        row = sheet.createRow(1);        font.setBold(true);        font.setFontHeight(16);        style.setFont(font);        createCell(row, 0, "Slip Id", style);        createCell(row, 1, "Employee Id", style);        createCell(row, 2, "Employee Name", style);        createCell(row, 3, "Email", style);        createCell(row, 4, "DOB", style);        createCell(row, 5, "Company", style);        createCell(row, 6, "Bank", style);        createCell(row, 7, "Generated On", style);        createCell(row, 8, "Account Number", style);        createCell(row, 9, "Bank Branch", style);        createCell(row, 10, "IFSC Code", style);        createCell(row, 11, "Pan Number", style);        createCell(row, 12, "PF Number", style);        createCell(row, 13, "Department", style);        createCell(row, 14, "Designation", style);        createCell(row, 15, "Date Of Joining", style);        createCell(row, 16, "LOP", style);        createCell(row, 17, "Working Days", style);        createCell(row, 18, "Basis Salary", style);        createCell(row, 19, "Month", style);        createCell(row, 20, "Conveyance", style);        createCell(row, 21, "Other Allowances", style);        createCell(row, 22, "Provident Fund", style);        createCell(row, 23, "LUF", style);        createCell(row, 24, "LOP Deduction", style);        createCell(row, 25, "Gross Earning", style);        createCell(row, 26, "Gross Deduction", style);        createCell(row, 27, "Net Pay", style);    }    private void writeSalaryData(){        int rowCount = 2;        CellStyle style = workbook.createCellStyle();        XSSFFont font = workbook.createFont();        font.setFontHeight(14);        style.setFont(font);        for (SalarySlip salarySlip:salarySlips) {            Row row= sheet.createRow(rowCount++);            int columnCount=0;            createCell(row,columnCount++,salarySlip.getSlipId(),style);            createCell(row,columnCount++,salarySlip.getEmployeeId(),style);            createCell(row,columnCount++,salarySlip.getName(),style);            createCell(row,columnCount++,salarySlip.getEmailId(),style);            createCell(row,columnCount++,salarySlip.getDOB(),style);            createCell(row,columnCount++,salarySlip.getCompany(),style);            createCell(row,columnCount++,salarySlip.getBankName(),style);            createCell(row,columnCount++,salarySlip.getCreatedOn(),style);            createCell(row,columnCount++,salarySlip.getBankAccountNumber(),style);            createCell(row,columnCount++,salarySlip.getBankBranch(),style);            createCell(row,columnCount++,salarySlip.getIfscCode(),style);            createCell(row,columnCount++,salarySlip.getPanNumber(),style);            createCell(row,columnCount++,salarySlip.getPfNumber(),style);            createCell(row,columnCount++,salarySlip.getDepartment(),style);            createCell(row,columnCount++,salarySlip.getDesignation(),style);            createCell(row,columnCount++,salarySlip.getDateOfJoining(),style);            createCell(row,columnCount++,salarySlip.getLop(),style);            createCell(row,columnCount++,salarySlip.getWorkingDays(),style);            createCell(row,columnCount++,salarySlip.getBasicSalary(),style);            createCell(row,columnCount++,salarySlip.getMonthFor(),style);            createCell(row,columnCount++,salarySlip.getConveyance(),style);            createCell(row,columnCount++,salarySlip.getOtherAllowances(),style);            createCell(row,columnCount++,salarySlip.getProvidentFund(),style);            createCell(row,columnCount++,salarySlip.getLuf(),style);            createCell(row,columnCount++,salarySlip.getLopPay(),style);            createCell(row,columnCount++,salarySlip.getGrossEarning(),style);            createCell(row,columnCount++,salarySlip.getGrossDeduction(),style);            createCell(row,columnCount++,salarySlip.getNetPay(),style);        }    }    public void exportDataToExcel(HttpServletResponse response) throws IOException, IOException {        createHeaderRow();        writeSalaryData();        ServletOutputStream outputStream = response.getOutputStream();        workbook.write(outputStream);        workbook.close();        outputStream.close();    }}