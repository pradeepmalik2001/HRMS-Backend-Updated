package com.ahom.hrms.serviceimpl;import com.ahom.hrms.Helper.ExportDataCsv;import com.ahom.hrms.Repository.AttendanceRepository;import com.ahom.hrms.Repository.BankingInfoRepository;import com.ahom.hrms.Repository.DeductionRepository;import com.ahom.hrms.Repository.SalarySlipRepository;import com.ahom.hrms.dto.EmployeeLeaveCount;import com.ahom.hrms.entities.*;import com.ahom.hrms.service.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.time.DayOfWeek;import java.time.LocalDate;import java.time.YearMonth;import java.time.format.DateTimeFormatter;import java.time.format.DateTimeFormatterBuilder;import java.util.*;@Servicepublic class SalarySlipServiceImpl implements SalarySlipService {    @Autowired    BankingInfoRepository bankingInfoRepository;    @Autowired    SalarySlipRepository salarySlipRepository;    @Autowired    LeaveRecordServiceImpl leaveRecordService;    @Autowired    AdvanceSalaryService advanceSalaryService;    @Autowired    OverTimeService overTimeService;    @Autowired    DeductionRepository deductionService;    @Autowired    AttendanceServiceImpl attendanceService;    @Autowired    AttendanceRepository attendanceRepository;    @Autowired    LeaveScenarioService leaveScenarioService;    @Override    public List<SalarySlip> saveSalary(String month) throws ParseException {        List<Deduction> d=deductionService.findAll();        List<BankingInfo> bankingInfo = bankingInfoRepository.findAll();        List<SalarySlip> listSalarySlip = new ArrayList<>();        DecimalFormat decimalFormat = new DecimalFormat("#.00");        YearMonth currentYearMonth = YearMonth.now();        int maxDayOfMonth = currentYearMonth.lengthOfMonth();        Date date=new Date();        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        String newDate= dateFormat.format(date);        month = month.toUpperCase();        for (BankingInfo info : bankingInfo) {            if(info!=null) {                if(attendanceRepository.findByUserName(info.getBasicEmployee1().getEmail()).isEmpty())                {                    continue;                }                double dayPay = leaveScenarioService.LeaveApproved(info.getName(), info.getBasicEmployee1().getEmail(), month, info.getId());                List<OverTime> overTime = overTimeService.findByUserName(info.getBasicEmployee1().getEmail());            double rates = 0;            double rate1 = 0;            for (OverTime time : overTime) {                double rate = Double.parseDouble(time.getRate());                rates += rate;                rate1 = rates / overTime.size();            }            for (Deduction deduction : d) {                int byUserNameAndMonth = overTimeService.getByUserNameAndMonth(month, info.getBasicEmployee1().getEmail());                AdvanceSalary advance;                try {                    advance = advanceSalaryService.findByEmployeeId(info.getId());                } catch (Exception e) {                    throw new RuntimeException(e);                }                double gratuity = Double.parseDouble(decimalFormat.format((deduction.getGratuity() / 100) * info.getGrossSalary()));                double number = (Double.parseDouble(String.valueOf(rate1))) * byUserNameAndMonth / 60;                if (advance != null && advance.getRemainingAdvance() >= 0 && !advance.isStatus()) {                    advanceSalaryService.updateSalary(advance, info.getId());                    EmployeeLeaveCount byId = leaveRecordService.getById(info.getId(), month);                    SalarySlip salarySlip = new SalarySlip();                    salarySlip.setWorkingDays(maxDayOfMonth);                    double luf = info.getGrossSalary() * (deduction.getLuf() / 100);                    double lopCount = byId.getLeaveCount();//                    double totalPayDay=present1+wfh+weekendCount+(absent-lopCount)+officialHoliday;                    double lop=maxDayOfMonth-dayPay;                    double lossOfPay = Double.parseDouble(decimalFormat.format((info.getBasicSalary() / maxDayOfMonth) * lop));//                    if(lopCount!=0 && )//                    {////                    }                    double advanceDeductionPerMonth = Double.parseDouble(decimalFormat.format(advance.getAmountToPayPerMonth()));                    double gross = Double.parseDouble(decimalFormat.format((info.getGrossSalary() * deduction.getProvidentFund() / 100) + luf + lossOfPay));                    gratuity = Double.parseDouble(decimalFormat.format((info.getBasicEmployee1().getCtc() * (deduction.getGratuity() / 100)) / 12));                    double overTimePay = Double.parseDouble(decimalFormat.                            format(number));                    salarySlip.setOverTimePay(overTimePay);                    salarySlip.setNetPay(Double.parseDouble(decimalFormat                            .format(info.getGrossSalary() - gross + overTimePay - gratuity - advance.getAmountToPayPerMonth())));                    salarySlip.setMonthFor(month);                    salarySlip.setLop(maxDayOfMonth-dayPay);                    salarySlip.setEmployeeId(info.getId());                    salarySlip.setName(info.getName());                    salarySlip.setBankName(info.getBankName());                    salarySlip.setBankAccountNumber(info.getBankAccountNo());                    salarySlip.setDOB(String.valueOf(info.getBasicEmployee1().getDob()));                    salarySlip.setEmailId(info.getBasicEmployee1().getEmail());                    salarySlip.setPfNumber(info.getBasicEmployee1().getPfnumber());                    salarySlip.setMobile(info.getBasicEmployee1().getMobile());                    salarySlip.setBankBranch(info.getBankBranch());                    salarySlip.setIfscCode(info.getIfscCode());                    salarySlip.setPanNumber(info.getBasicEmployee1().getPanNumber());                    salarySlip.setDepartment(info.getBasicEmployee1().getSelectDepartment());                    salarySlip.setDesignation(info.getBasicEmployee1().getDesignation());                    salarySlip.setDateOfJoining(info.getBasicEmployee1().getJoiningDate());                    salarySlip.setCompany(info.getBasicEmployee1().getWhichCompany());                    salarySlip.setCreatedOn(newDate);                    salarySlip.setPaidDays(dayPay);                    salarySlip.setOverTime((double) byUserNameAndMonth / 60);                    double v = Double.parseDouble(decimalFormat.format((info.getGrossSalary() - info.getBasicSalary()) * 0.40));                    double all = v / 2;                    salarySlip.setBasicSalary(Double.parseDouble(decimalFormat.format(info.getBasicSalary())));                    salarySlip.setHra(Double.parseDouble(decimalFormat.format((info.getGrossSalary() - info.getBasicSalary())                            * 0.60)));                    salarySlip.setConveyance(all);                    salarySlip.setOtherAllowances(all);                    // Calculation for deduction                    salarySlip.setProvidentFund(Double.parseDouble(decimalFormat.format(info.getGrossSalary() * (deduction.getProvidentFund() / 100))));                    salarySlip.setLuf(luf);                    salarySlip.setLopPay(lossOfPay);                    salarySlip.setGratuity(gratuity);                    salarySlip.setAdvance(Double.parseDouble(decimalFormat.format(advance.getAmountToPayPerMonth())));                    salarySlip.setGrossDeduction(gross + gratuity);                    // Calculation for Gross Earnings                    salarySlip.setGrossEarning(Double.parseDouble(decimalFormat                            .format(info.getGrossSalary())));                    salarySlipRepository.save(salarySlip);                    if (advance.getRemainingAdvance() < advance.getAmountToPayPerMonth()) {                        advance.setRemainingAdvance(advance.getRemainingAdvance());                        advance.setAmountToPayPerMonth(advance.getRemainingAdvance());                        advance.setStatus(true);                        advanceSalaryService.updateRemainingAdavnceMonth(advance);                    }                    listSalarySlip.add(salarySlip);                } else {                    EmployeeLeaveCount byId = leaveRecordService.getById(info.getId(), month);                    SalarySlip salarySlip = new SalarySlip();                    salarySlip.setWorkingDays(maxDayOfMonth);                    double luf = info.getGrossSalary() * (deduction.getLuf() / 100);                    double lopCount = maxDayOfMonth-dayPay;                    double lossOfPay = Double.parseDouble(decimalFormat.format((info.getBasicSalary() / maxDayOfMonth) * lopCount));                    double gross = Double.parseDouble(decimalFormat.format((info.getGrossSalary() * deduction.getProvidentFund() / 100) + luf + lossOfPay));                    salarySlip.setMonthFor(month);                    salarySlip.setLop(maxDayOfMonth-dayPay);                    salarySlip.setEmployeeId(info.getId());                    salarySlip.setName(info.getName());                    salarySlip.setBankName(info.getBankName());                    salarySlip.setBankAccountNumber(info.getBankAccountNo());                    salarySlip.setDOB(String.valueOf(info.getBasicEmployee1().getDob()));                    salarySlip.setEmailId(info.getBasicEmployee1().getEmail());                    salarySlip.setPfNumber(info.getBasicEmployee1().getPfnumber());                    salarySlip.setMobile(info.getBasicEmployee1().getMobile());                    salarySlip.setBankBranch(info.getBankBranch());                    salarySlip.setIfscCode(info.getIfscCode());                    salarySlip.setPanNumber(info.getBasicEmployee1().getPanNumber());                    salarySlip.setDepartment(info.getBasicEmployee1().getSelectDepartment());                    salarySlip.setDesignation(info.getBasicEmployee1().getDesignation());                    salarySlip.setDateOfJoining(info.getBasicEmployee1().getJoiningDate());                    salarySlip.setCompany(info.getBasicEmployee1().getWhichCompany());                    salarySlip.setCreatedOn(newDate);                    salarySlip.setPaidDays(dayPay);                    salarySlip.setOverTime((double) byUserNameAndMonth / 60);                    double v = Double.parseDouble(decimalFormat.format((info.getGrossSalary() - info.getBasicSalary()) * 0.40));                    double all = v / 2;                    double overTimePay = Double.parseDouble(decimalFormat.                            format(number));                    salarySlip.setOverTimePay(overTimePay);                    salarySlip.setNetPay(Double.parseDouble(decimalFormat                            .format(info.getGrossSalary() - gross + overTimePay - gratuity)));                    salarySlip.setBasicSalary(Double.parseDouble(decimalFormat.format(info.getBasicSalary())));                    salarySlip.setHra(Double.parseDouble(decimalFormat.format((info.getGrossSalary() - info.getBasicSalary())                            * 0.60)));                    salarySlip.setConveyance(all);                    salarySlip.setOtherAllowances(all);                    // Calculation for deduction                    salarySlip.setProvidentFund(Double.parseDouble(decimalFormat.format(info.getGrossSalary() * (deduction.getProvidentFund() / 100))));                    salarySlip.setLuf(luf);                    salarySlip.setLopPay(lossOfPay);                    salarySlip.setGratuity(gratuity);                    salarySlip.setGrossDeduction(gross + gratuity);                    // Calculation for Gross Earnings                    salarySlip.setGrossEarning(Double.parseDouble(decimalFormat.format(info.getGrossSalary())));                    salarySlipRepository.save(salarySlip);                    listSalarySlip.add(salarySlip);                }                }            }        }        return listSalarySlip;    }    @Override    public List<SalarySlip> getAllSalary(HttpServletResponse response,String month) throws IOException {        List<SalarySlip> all = salarySlipRepository.findByMonthFor(month);        if (all.isEmpty())        {            throw new RuntimeException("Record For the Month :"+month + " is not present");        }        ExportDataCsv exportDataCsv=new ExportDataCsv(all);        exportDataCsv.exportDataToExcel(response);        return all;    }    @Override    public SalarySlip getDataForPdf(String employeeId, String month) {        Optional<SalarySlip> slip = Optional.ofNullable(salarySlipRepository.findByEmployeeIdAndMonthFor(employeeId, month));        if (slip.isPresent()) {            return salarySlipRepository.findByEmployeeIdAndMonthFor(employeeId, month);        }else            throw new RuntimeException("No record available for this input");    }    @Override    public List<SalarySlip> getAll() {        return salarySlipRepository.findAll();    }    @Override    public Object delete(int id) {        salarySlipRepository.deleteById(id);        return null;    }    @Override    public SalarySlip updateSalary(SalarySlip salarySlip, int id) {        SalarySlip sa=salarySlipRepository.findById(id).orElse(null);        if (sa==null){            throw new RuntimeException("");        }        else {            double grossSalary = salarySlip.getHra() + salarySlip.getBasicSalary() + sa.getConveyance()                    + salarySlip.getOtherAllowances() + salarySlip.getOverTimePay();            double grossDeduction=salarySlip.getLopPay()+salarySlip.getAdvance()+salarySlip.getLuf()+salarySlip.getProvidentFund();            sa.setSlipId(salarySlip.getSlipId());            sa.setEmployeeId(salarySlip.getEmployeeId());            sa.setName(salarySlip.getName());            sa.setDOB(salarySlip.getDOB());            sa.setAdvance(salarySlip.getAdvance());            sa.setBankName(salarySlip.getBankName());            sa.setEmailId(salarySlip.getEmailId());            sa.setPfNumber(salarySlip.getPfNumber());            sa.setMobile(salarySlip.getMobile());            sa.setBankBranch(salarySlip.getBankBranch());            sa.setIfscCode(salarySlip.getIfscCode());            sa.setPanNumber(salarySlip.getPanNumber());            sa.setDepartment(salarySlip.getDepartment());            sa.setDesignation(salarySlip.getDesignation());            sa.setDateOfJoining(salarySlip.getDateOfJoining());            sa.setCompany(salarySlip.getCompany());            sa.setProvidentFund(salarySlip.getProvidentFund());            sa.setBankAccountNumber(salarySlip.getBankAccountNumber());            sa.setCreatedOn(salarySlip.getCreatedOn());            sa.setMonthFor(salarySlip.getMonthFor());            sa.setPaidDays(salarySlip.getPaidDays());            sa.setOverTime(salarySlip.getOverTime());            sa.setBasicSalary(salarySlip.getBasicSalary());            sa.setWorkingDays(salarySlip.getWorkingDays());            sa.setGrossDeduction(grossDeduction);            sa.setLop(salarySlip.getLop());            sa.setLuf(salarySlip.getLuf());            sa.setGratuity(salarySlip.getGratuity());            sa.setLopPay(salarySlip.getLopPay());            sa.setOtherAllowances(salarySlip.getOtherAllowances());            sa.setHra(salarySlip.getHra());            sa.setConveyance(salarySlip.getConveyance());            sa.setOverTimePay(salarySlip.getOverTimePay());            sa.setGrossEarning(grossSalary);            sa.setNetPay(grossSalary-grossDeduction);            salarySlipRepository.save(sa);        }        return sa;    }}